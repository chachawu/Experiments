/**
 * EnergizeGL WebGL Framework
 * created by Denny Koch
 * 
 * This software is published under the Creative Commons License
 * http://creativecommons.org/licenses/by-sa/3.0/
 * 
 * Copyright by Denny Koch (some rights reserved)
 * 
 * For questions and support, contact me at: http://energize.cc
 * 
 * To use EnergizeGL you need an WebGL ready browser!
 */

var EGLWindowDefaults={'PI':3.1415926535,'TWO_PI':6.283185307,'POINTS':null,'LINES':null,'TRIANGLES':null,'TRIANGLE_STRIP':null,'TRIANGLE_FAN':null,'lastMouseX':0,'lastMouseY':0,'width':0,'height':0,'mouseX':0,'mouseY':0,'mouseCanvasX':0,'mouseCanvasY':0,'mouseIsDragging':false,'mouseLastClickX':-1,'mouseLastClickY':-1,'mouseClickX':0,'mouseClickY':0,'mouseIsDown':false,'mouseLastReleaseX':-1,'mouseLastReleaseY':-1,'mouseReleaseX':0,'mouseReleaseY':0,'wheelSpeed':0,'key':'','keyCode':-1,'lastKey':'','lastKeyCode':-1,'keyIsDown':false,'lastPicked':'nothing','lastPickX':0,'lastPickY':0,'frame':0,'GAUSSIAN_BLUR':[1.0,2.0,1.0,2.0,4.0,2.0,1.0,2.0,1.0],'SMOOTHING':[1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0],'EDGE_DETECTION':[0.0,1.0,0.0,1.0,-4.0,1.0,0.0,1.0,0.0],'EMBOSS':[2.0,0.0,0.0,0.0,-1.0,0.0,0.0,0.0,-1.0],'SHARPENING':[-1.0,-1.0,-1.0,-1.0,9.0,-1.0,-1.0,-1.0,-1.0],'NO_FILTER':[0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0],'ON':true,'OFF':false};var EGLDefaults={'startTime':0,'logDOM':null,'doLogging':false,'doConsoleLogging':false,'canvas':null,'gl':null,'width':0,'height':0,'ratio':0,'screenPos':[0,0],'fieldOfViewY':45,'zNear':1,'zFar':1000,'pixelToUnitRatio':1,'ptuTestDone':true,'setup':null,'draw':null,'drawFrameStack':[],'drawTimeStack':[],'useDrawSwitching':false,'shaders':null,'buffers':null,'factory':null,'textures':null,'usersMouseMove':null,'usersMouseClick':null,'usersMouseDrag':null,'usersKeyDown':null,'usersKeyUp':null,'framebuffers':null,'lastPicked':'nothing','usersPicked':null,'depthBufferEvenFlag':1,'fps':60,'mspf':0,'currentFrame':0,'intID':null,'status':'loaded','skipDraw':false,'texturesToCreate':[],'modelsToCreate':[],'usersLoadCallback':null,'backgroundColor':[0,0,0,1],'color':[1.0,1.0,1.0,1.0],'doMeshWriting':false,'currentMesh':null,'numVertex':0,'numColor':0,'numNormal':0,'numTextureCoord':0,'numIndices':0,'doUsePicking':false,'savePickables':false,'pickingArray':new Uint8Array(4),'pickDrawList':[],'pickList':{},'currentPickColor':1,'doUsePostProcessing':false,'ppLists':[],'currentPPList':[]};function EnergizeGL(){}
EnergizeGL.version='Alpha 8.33';EnergizeGL.loadDefaults=function(src,dest){for(var wvar in src)dest[wvar]=src[wvar];}
EnergizeGL.loadDefaults(EGLWindowDefaults,window);EnergizeGL.loadDefaults(EGLDefaults,EnergizeGL);EnergizeGL.html=function(element,source){var e=document.getElementById(element);if(!e)return;if(source)e.innerHTML=source;else return e.innerHTML;}
EnergizeGL.getCurrentTime=function(start){var current=new Date().getTime();if(start)return current-start;return current;}
EnergizeGL.getRuntime=function(){return this.getCurrentTime(this.startTime);}
EnergizeGL.logRuntime=function(){this.log('<small>Runtime: '+this.getRuntime()+' ms</small>');}
function log(msg){EnergizeGL.log(msg);}
EnergizeGL.errorLog=function(where,e){EnergizeGL.log('<b>'+e.name+' in '+where+' ('+e.lineNumber+'):<br>'+e.message+'</b>');}
EnergizeGL.log=function(msg){if(this.doLogging){if(this.isArray(msg)){var arr=msg;msg='[';for(var i=0;i<arr.length;i++){if(i==0)msg=msg+arr[i];else msg=msg+','+arr[i];}
msg=msg+']';}
this.logDOM.innerHTML=msg+'<br>'+this.logDOM.innerHTML;}
if(this.doConsoleLogging)console.log(msg);}
function width(){return EnergizeGL.width;}
function height(){return EnergizeGL.height;}
function ratio(){return EnergizeGL.ratio;}
function fieldOfViewY(fovy){if(fovy)EnergizeGL.fieldOfViewY=fovy;return EnergizeGL.fieldOfViewY;}
function zNear(znear){if(znear)EnergizeGL.zNear=znear;return EnergizeGL.zNear;}
function zFar(zfar){if(zfar)EnergizeGL.zFar=zfar;return EnergizeGL.zFar;}
EnergizeGL.getWebGLContext=function(canvas){try{this.gl=canvas.getContext('experimental-webgl');}
catch(e){try{this.gl=canvas.getContext('webgl');}
catch(e){}}
if(this.gl){this.width=canvas.width;this.height=canvas.height;width=this.width;height=this.height;this.ratio=canvas.width/canvas.height;this.screenPos=getScreenPosition(canvas);this.log('Found canvas with '+this.width+'px / '+this.height+'px on screen position '+this.screenPos[0]+'px / '+this.screenPos[1]+'px');return true;}else{this.log('<b>Could not get WebGL Context! Is the canvas id correct? Do you have a WebGL enabled browser?</b>');return false;}}
EnergizeGL.isFunction=function(func){return typeof(func)=='function';}
function setDrawFunction(func){EnergizeGL.setDrawFunction(func);}
EnergizeGL.setDrawFunction=function(func){if(!this.isFunction(func)){EnergizeGL.draw=func;EnergizeGL.log('Switching draw function.');}}
function switchDrawFunction(func,time){EnergizeGL.switchDrawFunction(func,time);}
EnergizeGL.switchDrawFunction=function(func,cond){if(!this.isFunction(func))EnergizeGL.log('<b>Could not find a function for the draw function switch at time '+cond+'</b>');var sc=cond.split(':');if(sc.length!=2||(sc.length==2&&(sc[0]!='ms'&&sc[0]!='frame'))){this.log('<b>"'+cond+'" is an invalid switching condition!</b>');return false;}
var e=[];if(sc[0]=='frame'){e['frame']=sc[1];e['func']=func;this.drawFrameStack.push(e);}
this.useDrawSwitching=true;}
EnergizeGL.getDrawFunction=function(){if(this.useDrawSwitching){var dl=this.drawFrameStack.length;if(dl>0&&this.drawFrameStack[dl-1]['frame']==this.currentFrame){var e=this.drawFrameStack.pop();this.log(e['frame']);this.draw=e['func'];}}
return this.draw;}
EnergizeGL.init=function(canvas,log){this.status='starting';try{if(log){this.logDOM=log;this.logDOM.innerHTML='';this.doLogging=true;}
if(typeof(console)!='undefined'&&typeof(console.log)!='undefined'){this.doConsoleLogging=true;}
this.startTime=this.getCurrentTime();this.log('Starting EnergizeGL '+this.version+' at time '+this.startTime);if(!this.getWebGLContext(canvas)){this.log('Your browser does not support WebGL!');if(this.isset('nowebgl')&&this.isFunction(nowebgl)){nowebgl();}
return false;}
this.canvas=canvas;POINTS=this.gl.POINTS;LINES=this.gl.LINES;TRIANGLES=this.gl.TRIANGLES;TRIANGLE_STRIP=this.gl.TRIANGLE_STRIP;TRIANGLE_FAN=this.gl.TRIANGLE_FAN;this.logRuntime();this.log('Creating Textures');this.textures=new EGLTextures(this.gl);this.logRuntime();this.log('Creating Shaders');this.shaders=new EGLShaders(this.gl);this.shaders.createShader('convolution',this.shaders.convolution);this.shaders.createShader('std',this.shaders.std);this.logRuntime();this.log('Creating Buffers and Primitives');this.buffers=new EGLBufferObject(this.gl);this.startMesh('zero');this.addVertex(0.0,0.0,0.0);this.endMesh();this.startMesh('one');this.addVertex(1.0,1.0,1.0);this.endMesh();var factory=this.factory=new EGLFactory();this.startMesh('triangle');factory.addTriangle()
this.endMesh(true);this.startMesh('rectangle');factory.addRectangle();this.endMesh();this.startMesh('circle');this.factory.addCircle();this.endMesh();this.startMesh('grid');this.factory.addGrid(100.0);this.endMesh();this.startMesh('sphere');this.factory.addSphere(100.0,100.0);this.endMesh();this.startMesh('pyramid');this.factory.addPyramid(0.0,0.0,0.0,1.0);this.endMesh();this.startMesh('cube');this.factory.addCube(0.0,0.0,0.0,2.0,2.0,2.0);this.endMesh();this.framebuffers=new EGLFrameBuffers(this.gl);this.logRuntime();this.log('Starting Mouse- and Keyboard handling.')
if(this.isset('mouseMove')&&this.isFunction(mouseMove)){this.usersMouseMove=mouseMove;this.log('Found a mouseMove function.');}
if(this.isset('mouseDrag')&&this.isFunction(mouseDrag)){this.usersMouseDrag=mouseDrag;this.log('Found a mouseDrag function.');}
this.canvas.onmousemove=this.handleMouseMove;if(this.isset('mouseDown')&&this.isFunction(mouseDown)){this.usersMouseDown=mouseDown;this.log('Found a mouseDown function.');}
this.canvas.onmousedown=this.handleMouseDown;if(this.isset('mouseUp')&&this.isFunction(mouseUp)){this.usersMouseUp=mouseUp;this.log('Found a mouseUp function.');}
this.canvas.onmouseup=this.handleMouseUp;if(this.isset('mouseWheel')&&this.isFunction(mouseWheel)){this.usersMouseWheel=mouseWheel;this.log('Found a mouseWheel function.');}
if(window.addEventListener)window.addEventListener('DOMMouseScroll',this.handleMouseWheel,false);window.onmousewheel=document.onmousewheel=this.handleMouseWheel;if(this.isset('keyDown')&&this.isFunction(keyDown)){this.usersKeyDown=keyDown;this.log('Found a keyDown function.');}
window.onkeydown=this.handleKeyDown;if(this.isset('keyUp')&&this.isFunction(keyUp)){this.usersKeyUp=keyUp;this.log('Found a keyUp function.');}
window.onkeyup=this.handleKeyUp;if(this.isset('picked')&&this.isFunction(picked)){this.usersPicked=picked;this.log('Found a picked function.');}
if(isset('setup')&&this.isFunction(setup)){this.setup=setup;this.log('Found a setup function.');}
if(this.isFunction(this.setup)){this.log('Calling setup');try{EnergizeGL.setup();}catch(e){this.errorLog('setup',e);this.stop();return false;}}
this.logRuntime();try{this.setupGL();}catch(e){this.errorLog('gl setup',e);this.stop();return false;}}catch(e){this.errorLog('init',e);this.stop();return false;}
if(isset('draw')&&this.isFunction(draw)){this.log('Found a draw function.');this.draw=draw;}
this.status='loaded';return true;}
EnergizeGL.handleMouseMove=function(e){lastMouseX=mouseX;lastMouseY=mouseY;mouseX=e.pageX;mouseY=e.pageY;mouseCanvasX=mouseX-EnergizeGL.screenPos[0];mouseCanvasY=mouseY-EnergizeGL.screenPos[1];if(mouseIsDown)mouseIsDragging=true;if(mouseIsDown&&EnergizeGL.usersMouseDrag)EnergizeGL.usersMouseDrag();else if(EnergizeGL.usersMouseMove)EnergizeGL.usersMouseMove();}
EnergizeGL.handleMouseDown=function(e){mouseLastClickX=mouseClickX;mouseLastClickY=mouseClickY;mouseClickX=e.pageX;mouseclickY=e.pageY;mouseIsDown=true;if(EnergizeGL.usersMouseDown)EnergizeGL.usersMouseDown();}
EnergizeGL.handleMouseUp=function(e){mouseLastReleaseX=mouseReleaseX;mouseLastReleaseY=mouseReleaseY;mouseReleaseX=e.pageX;mouseReleaseY=e.pageY;mouseIsDown=false;mouseIsDragging=false;if(EnergizeGL.usersMouseDrag)EnergizeGL.usersMouseDrag();}
EnergizeGL.handleMouseWheel=function(e){var delta=0;if(!e)e=window.event;if(e.wheelDelta){delta=e.wheelDelta/120;if(window.opera)delta=-delta;}else if(e.detail){delta=-e.detail/3;}
wheelSpeed=delta;if(delta&&EnergizeGL.usersMouseWheel)EnergizeGL.usersMouseWheel();}
EnergizeGL.handleKeyDown=function(e){key=String.fromCharCode(e.keyCode);keyCode=e.keyCode;keyIsDown=true;if(EnergizeGL.usersKeyDown)EnergizeGL.usersKeyDown();}
EnergizeGL.handleKeyUp=function(e){key=String.fromCharCode(e.keyCode);keyCode=e.keyCode;keyIsDown=false;if(EnergizeGL.usersKeyUp)EnergizeGL.usersKeyUp();}
EnergizeGL.handlePick=function(p){this.lastPicked=p;lastPicked=this.lastPicked;lastPickX=mouseCanvasX;lastPickY=mouseCanvasY;if(this.usersPicked)this.usersPicked();}
function size(width,height){if(!height)height=width;EnergizeGL.canvas.width=width;EnergizeGL.canvas.height=height;}
EnergizeGL.setupGL=function(){this.gl.clearColor(this.backgroundColor[0],this.backgroundColor[1],this.backgroundColor[2],this.backgroundColor[3]);this.gl.clearDepth(1.0);this.gl.enable(this.gl.DEPTH_TEST);this.gl.depthFunc(this.gl.LEQUAL);this.gl.enable(this.gl.TEXTURE_2D);this.gl.enable(0x8642);}
function fps(fps){if(fps){EnergizeGL.mspf=1000/fps;EnergizeGL.fps=fps;}
return EnergizeGL.fps;}
function getCurrentFrame(){return EnergizeGL.currentFrame;}
function start(){EnergizeGL.start();}
EnergizeGL.start=function(){if(!this.isFunction(this.draw))return true;EnergizeGL.status='starting';this.startTime=this.getCurrentTime();this.log('Entering draw loop, trying '+this.fps+' fps ('+this.mspf+' mspf) at time '+this.startTime);this.intID=setInterval(EnergizeGL.metaDraw,this.mspf);}
EnergizeGL.clearAndSetScene=function(){this.gl.viewport(0,0,this.width,this.height);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);this.shaders.setPerspective(this.fieldOfViewY,this.ratio,this.zNear,this.zFar);this.shaders.loadIdentity();}
EnergizeGL.doPTUTest=function(){var pixels1=new Uint8Array(this.width*4);var pixels2=new Uint8Array(this.width*4);this.setBackgroundColor([0,0,0,0]);this.clearAndSetScene();this.setColor([1,1,1,1]);this.shaders.translate(0,0,-3);this.rectangle();this.gl.flush();this.gl.readPixels(0,(this.height/2),this.width,1,this.gl.RGBA,this.gl.UNSIGNED_BYTE,pixels1);this.setBackgroundColor([0,0,0,0]);this.clearAndSetScene();this.setColor([1,1,1,1]);this.shaders.translate(0,0,-4);this.rectangle();this.gl.flush();this.gl.readPixels(0,(this.height/2),this.width,1,this.gl.RGBA,this.gl.UNSIGNED_BYTE,pixels2);var pcount1=0;var pcount2=0;for(var i=0;i<pixels1.length;i++)if(pixels1[i]==255)pcount1++;for(var i=0;i<pixels2.length;i++)if(pixels2[i]==255)pcount2++;pcount1/=4;pcount2/=4;this.pixelToUnitRatio=pcount1-pcount2;this.ptuTestDone=true;}
EnergizeGL.metaDraw=function(){if(EnergizeGL.skipDraw)return false;try{EnergizeGL.status='drawing';EnergizeGL.noTexture();EnergizeGL.shaders.useShader('std');if(EnergizeGL.doUsePostProcessing&&EnergizeGL.currentPPList.length>0){EnergizeGL.startRenderToTexture('EnergizeGLPP1');}else EnergizeGL.clearAndSetScene();if(!EnergizeGL.ptuTestDone)EnergizeGL.doPTUTest();EnergizeGL.checkPick();try{EnergizeGL.getDrawFunction()();}catch(e){EnergizeGL.errorLog('drawloop',e);EnergizeGL.stop();return false;}
if(EnergizeGL.doUsePostProcessing&&EnergizeGL.currentPPList.length>0){EnergizeGL.stopRenderToTexture();EnergizeGL.shaders.useShader('convolution');if(EnergizeGL.currentPPList.length>1){var cck='EnergizeGLPP1';var nck='EnergizeGLPP2';for(var i=0;i<EnergizeGL.currentPPList.length-1;i++){startRenderToTexture(nck);EnergizeGL.shaders.setConvolutionKernel(EnergizeGL.currentPPList[i]);EnergizeGL.useTexture(cck);EnergizeGL.rectangle();stopRenderToTexture();cck=nck;nck='EnergizeGLPP'+(i+3);}
EnergizeGL.shaders.setConvolutionKernel(EnergizeGL.currentPPList[EnergizeGL.currentPPList.length-1]);EnergizeGL.useTexture(cck);EnergizeGL.rectangle();}else{if(EnergizeGL.currentPPList[0]){EnergizeGL.shaders.setConvolutionKernel(EnergizeGL.currentPPList[0]);EnergizeGL.useTexture('EnergizeGLPP1');EnergizeGL.rectangle();}}}}catch(e){EnergizeGL.errorLog('metadraw',e);EnergizeGL.stop();}
EnergizeGL.currentFrame++;frame++;}
function stop(){EnergizeGL.stop();}
EnergizeGL.stop=function(){clearInterval(this.intID);this.logRuntime();var rt=this.getRuntime()/1000;if(this['stopped']!='undefined'&&this.isFunction(this.stopped))this.stopped();this.log('Stopped draw loop at frame '+this.currentFrame+' with an avg. of '+this.currentFrame/rt+' fps');this.loadDefaults(EGLWindowDefaults,window);this.loadDefaults(EGLDefaults,this);EnergizeGL.status='stopped';}
function pause(){EnergizeGL.pause();}
EnergizeGL.pause=function(){clearInterval(this.intID);this.logRuntime();var rt=this.getRuntime()/1000;this.log('Paused draw loop at frame '+this.currentFrame+' with an avg. of '+this.currentFrame/rt+' fps');EnergizeGL.status='paused';}
function loadTexture(name,uri){EnergizeGL.loadTexture(name,uri);}
EnergizeGL.loadTexture=function(name,uri){this.texturesToCreate.push(name);EGLLoader.addImage(name,uri);}
function loadObjModel(name,uri){EnergizeGL.loadObjModel(name,uri);}
EnergizeGL.loadObjModel=function(name,uri){this.modelsToCreate.push(name);EGLLoader.addFile(name,uri);}
function startLoading(noDraw){EnergizeGL.startLoading(noDraw);}
EnergizeGL.startLoading=function(noDraw){this.skipDraw=typeof(noDraw)!='undefined'?noDraw:true;if(this.isset('loading')&&this.isFunction(loading))this.usersLoadCallback=loading;var self=this;EGLLoader.start(function(percent){self.loadCallback(percent);});}
EnergizeGL.loadCallback=function(percent){this.log(percent+'% loaded...');if(this.usersLoadCallback)this.usersLoadCallback(percent);if(percent==100){var name='';if(this.modelsToCreate.length>0){log('Building Models...');for(var i=0;i<this.modelsToCreate.length;i++){name=this.modelsToCreate[i];var mesh=this.factory.parseObjFile(EGLLoader.getFile(name).content);startMesh(name,mesh['i'].length/3);this.log('Loaded model with: '+mesh['i'].length/3+' vertices');this.addVertex(mesh['v']);this.addNormal(mesh['n']);this.addTextureCoord(mesh['t']);this.addIndex(mesh['i']);endMesh();}}
if(this.texturesToCreate.length>0){log('Start building '+this.texturesToCreate.length+' textures...');for(var i=0;i<this.texturesToCreate.length;i++){name=this.texturesToCreate[i];this.textures.createTextureFromImage(name,EGLLoader.getFile(name));this.log('Loaded texture '+name);}}
this.skipDraw=false;}}
function map(val,o1,e1,o2,e2){return EnergizeGL.map(val,o1,e1,o2,e2);}
EnergizeGL.map=function(val,o1,e1,o2,e2){return o2+(val/(e1-o1))*(e2-o2);}
function random(o,e){return EnergizeGL.random(o,e);}
EnergizeGL.random=function(o,e){if(!e){e=o;o=0;}
return o+(Math.random()*(e-o));}
function isArray(array){return EnergizeGL.isArray(array);}
EnergizeGL.isArray=function(v){if(!v)return false;var constr=v.constructor.toString();return constr.indexOf("Array")!=-1||constr.indexOf("Float32Array")!=-1||constr.indexOf("Uint16Array")!=-1;}
function isset(v){return EnergizeGL.isset(v);}
EnergizeGL.isset=function(v){return(typeof(window[v])!='undefined');}
EnergizeGL.fetchParams=function(x,y,z){if(this.isArray(x)){z=x[2];y=x[1];x=x[0];}
return[x,y,z];}
EnergizeGL.ensure3=function(f,a){var r=[];if(!this.isArray(a))return[f,f,f];return a;}
function getColor(r,g,b,a){return EnergizeGL.getColor(r,g,b,a);}
EnergizeGL.getColor=function(r,g,b,a){if(r!=null&&isArray(r)&&r.length==4)return r;if(r!=null&&typeof(r)=='string'&&r.charAt(0)=='#'){r=r.substring(1,7);b=map(parseInt(r.substring(4,6),16),0,255,0,1);g=map(parseInt(r.substring(2,4),16),0,255,0,1);r=map(parseInt(r.substring(0,2),16),0,255,0,1);}
if(a==null)a=1;if(r!=null&&g!=null&&b==null){a=g;g=r;b=r;}else if(r!=null&&g==null&&b==null){g=r;b=r;}
return[r,g,b,a];}
function setBackgroundColor(r,g,b,a){EnergizeGL.setBackgroundColor(r,g,b,a);}
EnergizeGL.setBackgroundColor=function(r,g,b,a){var c=this.getColor(r,g,b,a);this.backgroundColor=c;this.gl.clearColor(c[0],c[1],c[2],c[3]);}
function clearBackground(){EnergizeGL.clearBackground();}
EnergizeGL.clearBackground=function(){this.gl.viewport(0,0,this.width,this.height);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.COLOR_DEPTH_BIT);}
function setPointSize(size){EnergizeGL.setPointSize(size);}
EnergizeGL.setPointSize=function(ps){this.shaders.setPointSize(ps);}
function setColor(r,g,b,a){EnergizeGL.setColor(r,g,b,a);}
EnergizeGL.setColor=function(r,g,b,a){this.color=this.getColor(r,g,b,a);this.shaders.setColor([this.color[0],this.color[1],this.color[2],this.color[3]]);}
function noColor(){EnergizeGL.noColor();}
EnergizeGL.noColor=function(){this.shaders.noColor();}
function setAmbientColor(r,g,b){EnergizeGL.setAmbientColor(r,g,b);}
EnergizeGL.setAmbientColor=function(r,g,b){var c=this.getColor(r,g,b);this.gl.uniform3f(this.shaders.getCurrentShader().ambientColorUniform,c[0],c[1],c[2]);}
function useDirectLight(){EnergizeGL.useDirectLight(true);}
function noDirectLight(){EnergizeGL.useDirectLight(false);}
EnergizeGL.useDirectLight=function(yn){this.gl.uniform1i(this.shaders.getCurrentShader().useDirectLight,yn);}
function setDirectColor(r,g,b){EnergizeGL.setDirectColor(r,g,b);}
EnergizeGL.setDirectColor=function(r,g,b){var c=this.getColor(r,g,b);this.gl.uniform4f(this.shaders.getCurrentShader().uDirectColor,c[0],c[1],c[2],c[3]);}
function setDirectPosition(x,y,z){EnergizeGL.setDirectPosition(x,y,z);}
EnergizeGL.setDirectPosition=function(x,y,z){this.gl.uniform3f(this.shaders.getCurrentShader().uDirectPosition,x,y,z);}
function usePointLight(){EnergizeGL.usePointLight(true);}
function noPointLight(){EnergizeGL.usePointLight(false);}
EnergizeGL.usePointLight=function(yn){this.gl.uniform1i(this.shaders.getCurrentShader().usePointLightUniform,yn);}
function setPointColor(r,g,b){EnergizeGL.setPointColor(r,g,b);}
EnergizeGL.setPointColor=function(r,g,b){var c=this.getColor(r,g,b);this.gl.uniform3f(this.shaders.getCurrentShader().pointLightColorUniform,c[0],c[1],c[2]);}
function setPointPosition(x,y,z){EnergizeGL.setPointPosition(x,y,z);}
EnergizeGL.setPointPosition=function(x,y,z){this.gl.uniform3f(this.shaders.getCurrentShader().pointLightLocationUniform,x,y,z);}
function setShininess(s){EnergizeGL.setShininess(s);}
EnergizeGL.setShininess=function(s){this.gl.uniform1f(this.shaders.getCurrentShader().materialShininessUniform,s);}
function createTexture(name,width,height){EnergizeGL.createTexture(name,width,height);}
EnergizeGL.createTexture=function(name,width,height){this.textures.createTexture(name,width,height);}
function setTexturePixel(name,x,y,r,g,b,a){EnergizeGL.setTexturePixel(name,x,y,r,g,b,a);}
EnergizeGL.setTexturePixel=function(name,x,y,r,g,b,a){this.textures.setTexturePixel(name,x,y,[r,g,b,a]);}
function updateTexturePixels(name){EnergizeGL.updateTexturePixels(name);}
EnergizeGL.updateTexturePixels=function(name){this.textures.updateTexturePixels(name);}
function updateTexture(name){EnergizeGL.updateTexture(name);}
EnergizeGL.updateTexture=function(name){this.textures.updateTexture(name);}
function getTextureCanvas(name){return EnergizeGL.getTextureCanvas(name);}
EnergizeGL.getTextureCanvas=function(name){return this.textures.getTextureCanvas(name);}
function showTextureCanvas(name){EnergizeGL.showTextureCanvas(name);}
EnergizeGL.showTextureCanvas=function(name){this.textures.showTextureCanvas(name);}
function hideTextureCanvas(name){EnergizeGL.hideTextureCanvas(name);}
EnergizeGL.hideTextureCanvas=function(name){this.textures.hideTextureCanvas(name);}
function useTexture(name){EnergizeGL.useTexture(name);}
EnergizeGL.useTexture=function(name){this.shaders.useTexture(EnergizeGL.textures.getTexture(name));}
function noTexture(){EnergizeGL.noTexture();}
EnergizeGL.noTexture=function(){this.shaders.noTexture();}
function useAlpha(){EnergizeGL.useAlpha();}
EnergizeGL.useAlpha=function(){this.gl.disable(this.gl.DEPTH_TEST);this.gl.blendFunc(this.gl.SRC_ALPHA,this.gl.ONE);this.gl.enable(this.gl.BLEND);}
function noAlpha(){EnergizeGL.noAlpha();}
EnergizeGL.noAlpha=function(){this.gl.disable(this.gl.BLEND);this.gl.enable(this.gl.DEPTH_TEST);}
function usePostProcessing(){EnergizeGL.usePostProcessing();}
EnergizeGL.usePostProcessing=function(){this.doUsePostProcessing=true;}
function noPostProcessing(){EnergizeGL.noPostProcessing();}
EnergizeGL.noPostProcessing=function(){this.doUsePostProcessing=false;}
function addPostProcessingList(name,pps){EnergizeGL.addPostProcessingList(name,pps);}
EnergizeGL.addPostProcessingList=function(name,pps){if(!this.isArray(pps))return false;this.ppLists[name]=pps;}
function usePostProcessingList(name){EnergizeGL.usePostProcessingList(name);}
EnergizeGL.usePostProcessingList=function(name){this.currentPPList=this.ppLists[name];}
function EGLProgram(){this.vused={'aVertexPosition':true,'aVertexDest':true,'uUseTweening':true,'uTweenNumSteps':true,'uTweenStep':true,'aVertexColor':true,'aTextureCoord':true,'aVertexNormal':true,'uPMatrix':true,'uMVMatrix':true,'uNMatrix':true,'uPointSize':true,'uUseTexture':true,'uMap':true,'uMaterialShininess':true,'uColor':true,'uUseVertexColor':true,'uAmbientColor':true,'uUsePointLight':true,'uPointLightLocation':true,'uPointLightColor':true,'uCKernel':false};this.vertexShader='';this.fragmentShader='';this.precisionHint='#ifdef GL_ES\n'
+'precision highp float;\n'
+'#endif\n';}
EGLProgram.prototype.getVertexShader=function(){return this.vertexShader;}
EGLProgram.prototype.getFragmentShader=function(){return this.precisionHint+this.fragmentShader;}
EGLProgram.prototype.dontUse=function(v){this.vused[v]=false;}
EGLProgram.prototype.uses=function(v){return this.vused[v];}
function EGLShaders(gl){this.gl=gl;this.shaders=[];this.currentShader='';}
EGLShaders.prototype.std=new EGLProgram();EGLShaders.prototype.std.vertexShader='attribute vec3 aVertexPosition, aVertexDest, aVertexNormal; attribute vec2 aTextureCoord; attribute vec4 aVertexColor;\n'
+'uniform bool uUseTweening, uUseVertexColor;\n'
+'uniform float uTweenNumSteps, uTweenStep, uPointSize;\n'
+'uniform vec4 uColor;\n'
+'uniform mat4 uMVMatrix, uPMatrix, uNMatrix;\n'
+'varying vec4 vPosition, vTransformedNormal, vColor;\n'
+'varying vec2 vTextureCoord;\n'
+'void main(void) {\n'
+'vec3 newPosition;\n'
+'if(uUseTweening) newPosition = aVertexPosition+(((aVertexDest-aVertexPosition)/uTweenNumSteps)*uTweenStep);\n'
+'else newPosition = aVertexPosition;\n'
+'vPosition = uMVMatrix * vec4(newPosition, 1.0);\n'
+'gl_Position = uPMatrix * vPosition;\n'
+'vTransformedNormal = uNMatrix * vec4(aVertexNormal, 1.0);\n'
+'vTextureCoord = aTextureCoord;\n'
+'if(uUseVertexColor) vColor = aVertexColor;\n'
+'else vColor = uColor;\n'
+'gl_PointSize = uPointSize;\n'
+'}\n';EGLShaders.prototype.std.fragmentShader='varying vec2 vTextureCoord;\n'
+'varying vec4 vTransformedNormal, vPosition, vColor;\n'
+'uniform bool uUseTexture, uUsePointLight;\n'
+'uniform float uMaterialShininess;\n'
+'uniform vec3 uAmbientColor, uPointLightLocation, uPointLightColor;\n'
+'uniform sampler2D uMap;\n'
+'void main(void) {\n'
+'vec3 light;\n'
+'if(uUsePointLight) {\n'
+'vec3 lightDirection = normalize(uPointLightLocation - vPosition.xyz);\n'
+'vec3 normal = normalize(vTransformedNormal.xyz);\n'
+'vec3 eyeDirection = normalize(-vPosition.xyz);\n'
+'vec3 reflectionDirection = reflect(-lightDirection, normal);\n'
+'float specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), uMaterialShininess);\n'
+'float diffuseLightWeighting = max(dot(normal, lightDirection), 0.0);\n'
+'light = uAmbientColor + vec3(1.0, 1.0, 1.0) * specularLightWeighting + uPointLightColor * diffuseLightWeighting;\n'
+'} else {\n'
+'light = uAmbientColor;\n'
+'}\n'
+'vec4 fragColor;\n'
+'if(uUseTexture) fragColor = texture2D(uMap, vec2(vTextureCoord.s, vTextureCoord.t));\n'
+'else fragColor = vColor;\n'
+'gl_FragColor = vec4(fragColor.rgb * light, fragColor.a);\n'
+'}\n';EGLShaders.prototype.convolution=new EGLProgram();EGLShaders.prototype.convolution.vused={'aVertexPosition':true,'aVertexDest':false,'uUseTweening':false,'uTweenNumSteps':false,'uTweenStep':false,'aVertexColor':false,'aTextureCoord':true,'aVertexNormal':false,'uPMatrix':false,'uMVMatrix':false,'uNMatrix':false,'uPointSize':false,'uUseTexture':false,'uMap':true,'uMaterialShininess':false,'uColor':false,'uUseVertexColor':false,'uAmbientColor':false,'uUsePointLight':false,'uPointLightLocation':false,'uPointLightColor':false,'uCKernel':true};EGLShaders.prototype.convolution.vertexShader='attribute vec3 aVertexPosition; attribute vec2 aTextureCoord;\n'
+'varying vec2 vTextureCoord;\n'
+'void main(void) {\n'
+'vTextureCoord = aTextureCoord;\n'
+'gl_Position = vec4(aVertexPosition/0.5, 1.0);\n'
+'}\n';EGLShaders.prototype.convolution.fragmentShader='varying vec2 vTextureCoord;\n'
+'uniform sampler2D uMap;\n'
+'#define KERNEL_SIZE 9\n'
+'uniform vec3 uCKernel1;\n'
+'uniform vec3 uCKernel2;\n'
+'uniform vec3 uCKernel3;\n'
+'uniform float uCKernelDif;\n'
+'uniform float uWidth;\n'
+'uniform float uHeight;\n'
+'vec2 offset[KERNEL_SIZE];\n'
+'float kernel[KERNEL_SIZE];\n'
+'void main(void) {\n'
+'float sW = 1.0/uWidth;\n'
+'float sH = 1.0/uHeight;\n'
+'offset[0] = vec2(-sW, -sH);\n'
+'offset[1] = vec2(0.0, -sH);\n'
+'offset[2] = vec2(sW, -sH);\n'
+'offset[3] = vec2(-sW, 0.0);\n'
+'offset[4] = vec2(0.0, 0.0);\n'
+'offset[5] = vec2(sW, 0.0);\n'
+'offset[6] = vec2(-sW, sH);\n'
+'offset[7] = vec2(0.0, sH);\n'
+'offset[8] = vec2(sW, sH);\n'
+'kernel[0] = uCKernel1.x; kernel[1] = uCKernel1.y; kernel[2] = uCKernel1.z;\n'
+'kernel[3] = uCKernel2.x; kernel[4] = uCKernel2.y; kernel[5] = uCKernel2.z;\n'
+'kernel[6] = uCKernel3.x; kernel[7] = uCKernel3.y; kernel[8] = uCKernel3.z;\n'
+'int i = 0;\n'
+'vec4 sum = vec4(0.0);\n'
+'for(i = 0; i < KERNEL_SIZE; i++) {\n'
+'vec4 tmp = texture2D(uMap, vTextureCoord.st + offset[i]);\n'
+'sum += tmp * kernel[i];\n'
+'}\n'
+'gl_FragColor = sum/uCKernelDif;\n'
+'}\n';EGLShaders.prototype.useShader=function(name){this.currentShader=name;this.gl.useProgram(this.shaders[name]);}
EGLShaders.prototype.getCurrentShader=function(){return this.shaders[this.currentShader];}
EGLShaders.prototype.compileProgram=function(prog,type){var tprog=this.gl.createShader(type);this.gl.shaderSource(tprog,prog);this.gl.compileShader(tprog);if(!this.gl.getShaderParameter(tprog,this.gl.COMPILE_STATUS))return false;return tprog;}
EGLShaders.prototype.createShader=function(name,eglprogram){var program=this.shaders[name]=this.gl.createProgram();this.gl.attachShader(program,this.compileProgram(eglprogram.getVertexShader(),this.gl.VERTEX_SHADER));this.gl.attachShader(program,this.compileProgram(eglprogram.getFragmentShader(),this.gl.FRAGMENT_SHADER));this.gl.linkProgram(program);if(!this.gl.getProgramParameter(program,this.gl.LINK_STATUS))return false;this.useShader(name);if(eglprogram.uses('aVertexPosition')){program.vertexPositionAttribute=this.gl.getAttribLocation(program,"aVertexPosition");this.gl.enableVertexAttribArray(program.vertexPositionAttribute);}
if(eglprogram.uses('aVertexDest')){program.vertexDestAttribute=this.gl.getAttribLocation(program,"aVertexDest");this.gl.enableVertexAttribArray(program.vertexDestAttribute);}
if(eglprogram.uses('uUseTweening')){program.useTweeningUniform=this.gl.getUniformLocation(program,"uUseTweening");this.gl.uniform1i(program.useTweeningUniform,false);}
if(eglprogram.uses('uTweenNumSteps')){program.uTweenNumSteps=this.gl.getUniformLocation(program,"uTweenNumSteps");this.gl.uniform1f(program.uTweenNumSteps,0.0);}
if(eglprogram.uses('uTweenStep')){program.uTweenStep=this.gl.getUniformLocation(program,"uTweenStep");this.gl.uniform1f(program.uTweenStep,0.0);}
if(eglprogram.uses('aVertexColor')){program.vertexColorAttribute=this.gl.getAttribLocation(program,"aVertexColor");this.gl.enableVertexAttribArray(program.vertexColorAttribute);}
if(eglprogram.uses('aTextureCoord')){program.vertexTextureAttribute=this.gl.getAttribLocation(program,"aTextureCoord");this.gl.enableVertexAttribArray(program.vertexTextureAttribute);}
if(eglprogram.uses('aVertexNormal')){program.vertexNormalAttribute=this.gl.getAttribLocation(program,"aVertexNormal");this.gl.enableVertexAttribArray(program.vertexNormalAttribute);}
if(eglprogram.uses('uPMatrix')){program.pMatrixUniform=this.gl.getUniformLocation(program,"uPMatrix");}
if(eglprogram.uses('uMVMatrix')){program.mvMatrixUniform=this.gl.getUniformLocation(program,"uMVMatrix");}
if(eglprogram.uses('uNMatrix')){program.nMatrixUniform=this.gl.getUniformLocation(program,"uNMatrix");}
if(eglprogram.uses('uPointSize')){program.uPointSize=this.gl.getUniformLocation(program,"uPointSize");this.gl.uniform1f(program.uPointSize,2.0);}
if(eglprogram.uses('uUseTexture')){program.useTextureUniform=this.gl.getUniformLocation(program,"uUseTexture");this.gl.uniform1i(program.useTextureUniform,false);}
if(eglprogram.uses('uMap')){program.mapUniform=this.gl.getUniformLocation(program,"uMap");}
if(eglprogram.uses('uMaterialShininess')){program.materialShininessUniform=this.gl.getUniformLocation(program,"uMaterialShininess");this.gl.uniform1f(program.materialShininessUniform,512.0);}
if(eglprogram.uses('uColor')){program.uColor=this.gl.getUniformLocation(program,"uColor");this.gl.uniform4f(program.uColor,1.0,1.0,1.0,1.0);}
if(eglprogram.uses('uUseVertexColor')){program.uUseVertexColor=this.gl.getUniformLocation(program,"uUseVertexColor");this.gl.uniform1i(program.uUseVertexColor,true);}
if(eglprogram.uses('uAmbientColor')){program.ambientColorUniform=this.gl.getUniformLocation(program,"uAmbientColor");this.gl.uniform3f(program.ambientColorUniform,1.0,1.0,1.0);}
if(eglprogram.uses('uUsePointLight')){program.usePointLightUniform=this.gl.getUniformLocation(program,"uUsePointLight");this.gl.uniform1i(program.usePointLightUniform,false);}
if(eglprogram.uses('uPointLightLocation')){program.pointLightLocationUniform=this.gl.getUniformLocation(program,"uPointLightLocation");this.gl.uniform3f(program.pointLightLocationUniform,0.0,0.0,0.0);}
if(eglprogram.uses('uPointLightColor')){program.pointLightColorUniform=this.gl.getUniformLocation(program,"uPointLightColor");this.gl.uniform3f(program.pointLightColorUniform,1.0,0.0,1.0);}
if(eglprogram.uses('uCKernel')){program.uCKernel1=this.gl.getUniformLocation(program,"uCKernel1");program.uCKernel2=this.gl.getUniformLocation(program,"uCKernel2");program.uCKernel3=this.gl.getUniformLocation(program,"uCKernel3");program.uCKernelDif=this.gl.getUniformLocation(program,"uCKernelDif");program.uWidth=this.gl.getUniformLocation(program,"uWidth");this.gl.uniform1f(program.uWidth,EnergizeGL.width);program.uHeight=this.gl.getUniformLocation(program,"uHeight");this.gl.uniform1f(program.uHeight,EnergizeGL.height);this.setConvolutionKernel([0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0]);}
if(this.currentShader!='')this.useShader(this.currentShader);return this.getCurrentShader();}
EGLShaders.prototype.setConvolutionKernel=function(k){if(k.length==10)this.gl.uniform1f(this.getCurrentShader().uCKernelDif,k[10]);else this.gl.uniform1f(this.getCurrentShader().uCKernelDif,(k[0]+k[1]+k[2]+k[3]+k[4]+k[5]+k[6]+k[7]+k[8])==0.0?1.0:(k[0]+k[1]+k[2]+k[3]+k[4]+k[5]+k[6]+k[7]+k[8]));this.gl.uniform3f(this.getCurrentShader().uCKernel1,k[0],k[1],k[2]);this.gl.uniform3f(this.getCurrentShader().uCKernel2,k[3],k[4],k[5]);this.gl.uniform3f(this.getCurrentShader().uCKernel3,k[6],k[7],k[8]);}
EGLShaders.prototype.mvMatrix=mat4.create();EGLShaders.prototype.loadIdentity=function(){mat4.identity(this.mvMatrix);}
function setCamera(x,y,z,tx,ty,tz,ux,uy,uz){EnergizeGL.shaders.setCamera([x,y,z],[tx,ty,tz],[ux,uy,uz]);}
EGLShaders.prototype.cameraMatrix=mat4.identity(mat4.create());EGLShaders.prototype.setCamera=function(position,target,up){mat4.multiply(this.mvMatrix,mat4.lookAt(position,target,up,this.cameraMatrix));}
EGLShaders.prototype.pMatrix=mat4.create();EGLShaders.prototype.setPerspective=function(fovy,aspect,znear,zfar){mat4.perspective(fovy,aspect,znear,zfar,this.pMatrix);}
function translate(x,y,z){EnergizeGL.translate(x,y,z);}
EnergizeGL.translate=function(x,y,z){EnergizeGL.shaders.translate(x,y,z);}
EGLShaders.prototype.translate=function(x,y,z){mat4.translate(this.mvMatrix,[x,y,z]);}
function rotate(x,y,z){EnergizeGL.rotate(x,y,z);}
function rotateX(a){EnergizeGL.rotate(a,0,0);}
function rotateY(a){EnergizeGL.rotate(0,a,0);}
function rotateZ(a){EnergizeGL.rotate(0,0,a);}
EnergizeGL.rotate=function(x,y,z){EnergizeGL.shaders.rotate(x,y,z);}
EGLShaders.prototype.rotate=function(x,y,z){mat4.rotate(this.mvMatrix,x,[1,0,0]);mat4.rotate(this.mvMatrix,y,[0,1,0]);mat4.rotate(this.mvMatrix,z,[0,0,1]);}
function scale(x,y,z){EnergizeGL.scale(x,y,z);}
function scaleX(a){EnergizeGL.scale(a,1,1);}
function scaleY(a){EnergizeGL.scale(1,a,1);}
function scaleZ(a){EnergizeGL.scale(1,1,a);}
EnergizeGL.scale=function(x,y,z){EnergizeGL.shaders.scale(x,y,z);}
EGLShaders.prototype.scale=function(x,y,z){mat4.scale(this.mvMatrix,[x,y,z]);}
EGLShaders.prototype.setTweenParams=function(numsteps,step){this.gl.uniform1f(this.getCurrentShader().uTweenNumSteps,numsteps);this.gl.uniform1f(this.getCurrentShader().uTweenStep,step);this.gl.uniform1i(this.getCurrentShader().useTweeningUniform,true);}
EGLShaders.prototype.noTween=function(){this.gl.uniform1i(this.getCurrentShader().useTweeningUniform,false);}
EGLShaders.prototype.nMatrix=mat4.create();EGLShaders.prototype.bindMatrixUniforms=function(){var cs=this.getCurrentShader();this.gl.uniformMatrix4fv(cs.pMatrixUniform,false,this.pMatrix);this.gl.uniformMatrix4fv(cs.mvMatrixUniform,false,this.mvMatrix);mat4.inverse(this.mvMatrix,this.nMatrix);mat4.transpose(this.nMatrix);this.gl.uniformMatrix4fv(cs.nMatrixUniform,false,this.nMatrix);}
EGLShaders.prototype.mvMatrixStack=[];function pushMatrix(){EnergizeGL.pushMatrix();}
EnergizeGL.pushMatrix=function(m){this.shaders.pushMatrix(m);}
EGLShaders.prototype.pushMatrix=function(m){if(m)this.mvMatrixStack.push(m);else this.mvMatrixStack.push(mat4.set(this.mvMatrix,mat4.create()));}
function popMatrix(){EnergizeGL.popMatrix();}
EnergizeGL.popMatrix=function(){this.shaders.popMatrix();}
EGLShaders.prototype.popMatrix=function(){if(this.mvMatrixStack.length>0)this.mvMatrix=this.mvMatrixStack.pop();}
EGLShaders.prototype.metaDraw=function(){this.bindMatrixUniforms();}
EGLShaders.prototype.drawArrays=function(numItems,method){this.metaDraw();this.gl.drawArrays(method,0,numItems);}
EGLShaders.prototype.drawElements=function(numItems,method){this.metaDraw();this.gl.drawElements(method,numItems,this.gl.UNSIGNED_SHORT,0);}
EGLShaders.prototype.bindCurrentTexture=function(){if(this.currentTexture){this.gl.activeTexture(this.gl.TEXTURE0);this.gl.bindTexture(this.gl.TEXTURE_2D,this.currentTexture);this.gl.uniform1i(this.getCurrentShader().mapUniform,0);}}
EGLShaders.prototype.currentTexture=null;EGLShaders.prototype.useTexture=function(texture){this.currentTexture=texture;this.gl.uniform1i(this.getCurrentShader().useTextureUniform,true);this.bindCurrentTexture();}
EGLShaders.prototype.noTexture=function(){this.currentTexture=null;this.gl.activeTexture(this.gl.TEXTURE0);this.gl.bindTexture(this.gl.TEXTURE_2D,null);this.gl.uniform1i(this.getCurrentShader().useTextureUniform,false);}
EGLShaders.prototype.setColor=function(color){this.gl.uniform4f(this.getCurrentShader().uColor,color[0],color[1],color[2],color[3]);this.gl.uniform1i(this.getCurrentShader().uUseVertexColor,false);}
EGLShaders.prototype.noColor=function(){this.gl.uniform1i(this.getCurrentShader().uUseVertexColor,true);}
EGLShaders.prototype.setPointSize=function(ps){this.gl.uniform1f(this.getCurrentShader().uPointSize,ps);}
function EGLBufferObject(gl){this.gl=gl;this.buffers=[];}
EGLBufferObject.prototype.createBuffer=function(name,data,itemSize,bufferSize){var buffer=this.buffers[name]=this.gl.createBuffer();bufferSize=bufferSize?bufferSize/itemSize:data.length/itemSize;buffer.data=data;buffer.itemSize=itemSize;buffer.numItems=bufferSize;}
EGLBufferObject.prototype.createArrayBuffer=function(name,data,itemSize,bufferSize){this.createBuffer(name,data,itemSize,bufferSize);this.uploadArrayData(name);}
EGLBufferObject.prototype.createElementBuffer=function(name,data,itemSize,bufferSize){this.createBuffer(name,data,itemSize,bufferSize);this.uploadElementData(name);}
EGLBufferObject.prototype.uploadArrayData=function(name){var b=this.getBuffer(name);if(!b)return false;this.gl.bindBuffer(this.gl.ARRAY_BUFFER,b);this.gl.bufferData(this.gl.ARRAY_BUFFER,b.data,this.gl.STATIC_DRAW);}
EGLBufferObject.prototype.uploadElementData=function(name){var b=this.getBuffer(name);if(!b)return false;this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,b);this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,b.data,this.gl.STATIC_DRAW);}
EGLBufferObject.prototype.createGenBuffer=function(name,value,size,itemSize){var data=[];for(var i=0;i<size;i++)data.push(value);this.createArrayBuffer(name,data,itemSize);}
EGLBufferObject.prototype.getBuffer=function(name){return this.buffers[name];}
EGLBufferObject.prototype.exists=function(name){return(this.buffers[name]!=null);}
EGLBufferObject.prototype.bindBuffer=function(name,method){method=method?method:this.gl.ARRAY_BUFFER;this.gl.bindBuffer(method,this.getBuffer(name));}
EnergizeGL.cubesAddedToMesh=-1;function startMesh(name,numVertices){EnergizeGL.startMesh(name,numVertices);}
EnergizeGL.startMesh=function(name,numVertices,numIndices){this.numVertex=0;this.numNormal=0;this.numTextureCoord=0;this.numColor=0;this.numIndices=0;this.currentMesh=null;this.cubesAddedToMesh=0;if(!numVertices)numVertices=100000;this.currentMesh={};this.currentMesh.name=name;this.currentMesh.v=new Float32Array(numVertices*3);this.currentMesh.c=new Float32Array(numVertices*4);this.currentMesh.n=new Float32Array(numVertices*3);this.currentMesh.t=new Float32Array(numVertices*2);numIndices=numIndices?numIndices:numVertices*3;this.currentMesh.i=new Uint16Array(numIndices);this.numVertex=0;this.numColor=0;this.doMeshWriting=true;}
function addVertex(x,y,z){EnergizeGL.addVertex(x,y,z);}
EnergizeGL.addVertex=function(x,y,z){if(this.isArray(x)){for(var i=0;i<x.length;i+=3){this.currentMesh.v[this.numVertex++]=x[i];this.currentMesh.v[this.numVertex++]=x[i+1];this.currentMesh.v[this.numVertex++]=x[i+2];this.currentMesh.c[this.numColor++]=this.color[0];this.currentMesh.c[this.numColor++]=this.color[1];this.currentMesh.c[this.numColor++]=this.color[2];this.currentMesh.c[this.numColor++]=this.color[3];}}else{this.currentMesh.v[this.numVertex++]=x;this.currentMesh.v[this.numVertex++]=y;this.currentMesh.v[this.numVertex++]=z;this.currentMesh.c[this.numColor++]=this.color[0];this.currentMesh.c[this.numColor++]=this.color[1];this.currentMesh.c[this.numColor++]=this.color[2];this.currentMesh.c[this.numColor++]=this.color[3];}}
function addNormal(x,y,z){EnergizeGL.addNormal(x,y,z);}
EnergizeGL.addNormal=function(x,y,z){if(this.isArray(x)){for(var i=0;i<x.length;i++)this.currentMesh.n[this.numNormal++]=x[i];}else{this.currentMesh.n[this.numNormal++]=x;this.currentMesh.n[this.numNormal++]=y;this.currentMesh.n[this.numNormal++]=z;}}
function addTextureCoord(u,v){EnergizeGL.addTextureCoord(u,v);}
EnergizeGL.addTextureCoord=function(u,v){if(this.isArray(u)){for(var i=0;i<u.length;i++)this.currentMesh.t[this.numTextureCoord++]=u[i];}else{this.currentMesh.t[this.numTextureCoord++]=u;this.currentMesh.t[this.numTextureCoord++]=v;}}
function addIndex(i){EnergizeGL.addIndex(i);}
EnergizeGL.addIndex=function(i){if(this.isArray(i)){for(var j=0;j<i.length;j++)this.currentMesh.i[this.numIndices++]=i[j];}else{this.currentMesh.i[this.numIndices++]=i;}}
EnergizeGL.generateNormals=function(vertices,nvLength){var faceNormals=new Float32Array(nvLength);var v1,v2,v3,va,vb,n;var npos=0;for(var i=0;i<nvLength;i+=9){v1=vec3.create([vertices[i],vertices[i+1],vertices[i+2]]);v2=vec3.create([vertices[i+3],vertices[i+4],vertices[i+5]]);v3=vec3.create([vertices[i+6],vertices[i+7],vertices[i+8]]);va=vec3.subtract(v2,v1);vb=vec3.subtract(v3,v1);n=vec3.cross(va,vb);n=vec3.normalize(n);faceNormals[npos++]=n[0];faceNormals[npos++]=n[1];faceNormals[npos++]=n[2]*-1;faceNormals[npos++]=n[0];faceNormals[npos++]=n[1];faceNormals[npos++]=n[2]*-1;faceNormals[npos++]=n[0];faceNormals[npos++]=n[1];faceNormals[npos++]=n[2]*-1;}
return faceNormals;}
function endMesh(generateNormalsIfNeeded){EnergizeGL.endMesh(generateNormalsIfNeeded);}
EnergizeGL.endMesh=function(generateNormalsIfNeeded){generateNormalsIfNeeded=generateNormalsIfNeeded?generateNormalsIfNeeded:true;var bg=this.buffers;var vLength=this.currentMesh.v.length/3;if(this.currentMesh.t.length/2<vLength){for(var i=0;i<vLength;i++)this.addTextureCoord(0,0);}
if(generateNormalsIfNeeded&&this.numNormal<this.numVertex){this.numNormal=0;this.addNormal(this.generateNormals(this.currentMesh.v,this.numVertex));}
bg.createArrayBuffer(this.currentMesh.name+'V',this.currentMesh.v,3,this.numVertex);bg.createArrayBuffer(this.currentMesh.name+'C',this.currentMesh.c,4,this.numColor);bg.createArrayBuffer(this.currentMesh.name+'N',this.currentMesh.n,3,this.numNormal);bg.createArrayBuffer(this.currentMesh.name+'T',this.currentMesh.t,2,this.numTextureCoord);if(this.numIndices>0){bg.createElementBuffer(this.currentMesh.name+'I',this.currentMesh.i,1,this.numIndices);}
this.numVertex=0;this.numNormal=0;this.numTextureCoord=0;this.numColor=0;this.numIndices=0;this.doMeshWriting=false;this.currentMesh=null;}
function mesh(name,method,x,y,z,w,h,d){EnergizeGL.mesh(name,method,x,y,z,w,h,d);}
EnergizeGL.mesh=function(name,method,x,y,z,w,h,d,tweenDest){if(tweenDest){this.buffers.bindBuffer(tweenDest+'V');this.gl.vertexAttribPointer(this.shaders.getCurrentShader().vertexDestAttribute,3,this.gl.FLOAT,false,0,0);}else{this.buffers.bindBuffer('zeroV');this.gl.vertexAttribPointer(this.shaders.getCurrentShader().vertexDestAttribute,3,this.gl.FLOAT,false,0,0);}
if(this.doMeshWriting){this.addVertex(this.buffers.getBuffer(name+'V').data);}else{this.pushMatrix();this.scale(this.ensureValue(w,1),this.ensureValue(h,1),this.ensureValue(d,1));this.translate(this.ensureValue(x,0),this.ensureValue(y,0),this.ensureValue(z,0));if(this.savePickables)this.pickDrawList.push([this.shaders.mvMatrix,name,method]);this.buffers.bindBuffer(name+'V');this.gl.vertexAttribPointer(this.shaders.getCurrentShader().vertexPositionAttribute,3,this.gl.FLOAT,false,0,0);this.buffers.bindBuffer(name+'N');this.gl.vertexAttribPointer(this.shaders.getCurrentShader().vertexNormalAttribute,3,this.gl.FLOAT,false,0,0);this.buffers.bindBuffer(name+'C');this.gl.vertexAttribPointer(this.shaders.getCurrentShader().vertexColorAttribute,4,this.gl.FLOAT,false,0,0);this.buffers.bindBuffer(name+'T');this.gl.vertexAttribPointer(this.shaders.getCurrentShader().vertexTextureAttribute,2,this.gl.FLOAT,false,0,0);if(this.buffers.exists(name+'I')){this.buffers.bindBuffer(name+'I',this.gl.ELEMENT_ARRAY_BUFFER);this.shaders.drawElements(this.buffers.getBuffer(name+'I').numItems,method);}else{this.shaders.drawArrays(this.buffers.getBuffer(name+'V').numItems,method);}
this.popMatrix();}}
function tween(src,dest,method,numsteps,step,easing){EnergizeGL.tween(src,dest,method,numsteps,step,easing);}
EnergizeGL.tween=function(src,dest,method,numsteps,step,easing){this.shaders.setTweenParams(numsteps*1.0,step*1.0);this.mesh(src,method,0,0,0,1,1,1,dest);this.shaders.noTween();}
function usePicking(){EnergizeGL.usePicking();}
function noPicking(){EnergizeGL.noPicking();}
EnergizeGL.usePicking=function(){this.doUsePicking=true;}
EnergizeGL.noPicking=function(){this.doUsePicking=false;}
function startPickables(){EnergizeGL.startPickables();}
EnergizeGL.startPickables=function(){this.savePickables=true;}
function endPickables(){EnergizeGL.endPickables();}
EnergizeGL.endPickables=function(){this.savePickables=false;}
EnergizeGL.drawPicks=function(){this.pickList={};this.currentPickColor=1;var cbg=this.backgroundColor;this.setBackgroundColor(0,1,0,1);this.noTexture();this.noColor();var dc;this.shaders.pushMatrix();for(var i=0;i<this.pickDrawList.length;i++){dc=this.pickDrawList[i];this.shaders.mvMatrix=dc[0];this.pickList[this.currentPickColor]=dc[1];this.setColor(map(this.currentPickColor,0,255,0,1),0,0);this.mesh(dc[1],dc[2]);this.noColor();this.currentPickColor++;}
this.shaders.popMatrix();this.setBackgroundColor(cbg);}
EnergizeGL.checkPick=function(){if(!this.doUsePicking)return true;this.doUsePicking=false;this.drawPicks();this.gl.flush();this.gl.readPixels(mouseCanvasX,(this.height-mouseCanvasY),1,1,this.gl.RGBA,this.gl.UNSIGNED_BYTE,this.pickingArray);if(this.pickList[this.pickingArray[0]]){this.handlePick(this.pickList[this.pickingArray[0]]);}
else{this.lastPicked='nothing';lastPicked=this.lastPicked;}
this.clearAndSetScene();this.pickDrawList=[];this.doUsePicking=true;}
EnergizeGL.addPick=function(n){this.pickList[this.currentPickColor++]=n;if(this.currentPickColor==255){log('!For performance and technical reasons, picking is limited to 255 pickable objects!');this.endPickables();}}
function EGLFactory(){}
EGLFactory.prototype.addTriangle=function(x,y,z,w,h){var x=(x!=null)?x:0;var y=(y!=null)?y:0;var z=(z!=null)?z:0;var w=(w!=null)?w:1;var h=(h!=null)?h:1;var hw=w/2;var hh=h/2;EnergizeGL.addVertex([x-hw,y-hh,z,x,y+hh,z,x+hw,y-hh,z]);EnergizeGL.addNormal([0,0,1,0,0,1,0,0,1]);}
EGLFactory.prototype.addRectangle=function(x,y,z,w,h){var x=(x!=null)?x:0;var y=(y!=null)?y:0;var z=(z!=null)?z:0;var w=(w!=null)?w:1;var h=(h!=null)?h:1;var hw=w/2;var hh=h/2;EnergizeGL.addVertex([x-hw,y-hh,z,x+hw,y-hh,z,x-hw,y+hh,z,x+hw,y+hh,z]);EnergizeGL.addNormal([0,0,1,0,0,1,0,0,1,0,0,1]);EnergizeGL.addTextureCoord([0,0,1,0,0,1,1,1]);}
EGLFactory.prototype.addCircle=function(x,y,z,r,sides){var x=(x!=null)?x:0;var y=(y!=null)?y:0;var z=(z!=null)?z:0;var r=(r!=null)?r/2:0.5;var sides=(sides!=null)?sides:50;var v=[];for(var i=0;i<=sides;i++){v=[x+Math.cos(i*TWO_PI/sides)*r,y+Math.sin(i*TWO_PI/sides)*r,z];EnergizeGL.addVertex(v);EnergizeGL.addNormal(0,0,1);EnergizeGL.addTextureCoord((Math.cos(i*TWO_PI/sides)+1.0)*0.5,(Math.sin(i*TWO_PI/sides)+1.0)*0.5);}}
EGLFactory.prototype.addGrid=function(steps){var w=2000;var h=w;var ws=w/steps;var hs=h/steps;for(var i=0;i<steps;i++){x=-(w/2)+(ws*i);if(x!=0){EnergizeGL.addVertex(x,0,-(h/2));EnergizeGL.addVertex(x,0,(h/2));EnergizeGL.addNormal(0,0,1);EnergizeGL.addNormal(0,0,1);}}
for(var i=0;i<steps;i++){z=-(h/2)+(hs*i);if(z!=0){EnergizeGL.addVertex(-(w/2),0,z);EnergizeGL.addVertex((w/2),0,z);EnergizeGL.addNormal(0,0,1);EnergizeGL.addNormal(0,0,1);}}}
EGLFactory.prototype.addSphere=function(numLat,numLong){if(numLong==null&&numLat!=null)numLong=numLat;if(numLong==null)numLong=10;if(numLat==null)numLat=10;var latitudeBands=numLat;var longitudeBands=numLong;var radius=1;var vertexPositionData=[];var normalData=[];var textureCoordData=[];for(var latNumber=0;latNumber<=latitudeBands;latNumber++){var theta=latNumber*Math.PI/latitudeBands;var sinTheta=Math.sin(theta);var cosTheta=Math.cos(theta);for(var longNumber=0;longNumber<=longitudeBands;longNumber++){var phi=longNumber*2*Math.PI/longitudeBands;var sinPhi=Math.sin(phi);var cosPhi=Math.cos(phi);var x=cosPhi*sinTheta;var y=cosTheta;var z=sinPhi*sinTheta;var u=1-(longNumber/longitudeBands);var v=1-(latNumber/latitudeBands);normalData.push(x);normalData.push(y);normalData.push(z);textureCoordData.push(u);textureCoordData.push(v);vertexPositionData.push(radius*x);vertexPositionData.push(radius*y);vertexPositionData.push(radius*z);}}
var indexData=[];for(var latNumber=0;latNumber<latitudeBands;latNumber++){for(var longNumber=0;longNumber<longitudeBands;longNumber++){var first=(latNumber*(longitudeBands+1))+longNumber;var second=first+longitudeBands+1;indexData.push(first);indexData.push(second);indexData.push(first+1);indexData.push(second);indexData.push(second+1);indexData.push(first+1);}}
EnergizeGL.addVertex(vertexPositionData);EnergizeGL.addNormal(normalData);EnergizeGL.addTextureCoord(textureCoordData);EnergizeGL.addIndex(indexData);}
EGLFactory.prototype.addPyramid=function(x,y,z,s){EnergizeGL.addVertex([0.0,1.0,0.0,-1.0,-1.0,1.0,1.0,-1.0,1.0,0.0,1.0,0.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,0.0,1.0,0.0,1.0,-1.0,-1.0,-1.0,-1.0,-1.0,0.0,1.0,0.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0]);}
EGLFactory.prototype.addCube=function(x,y,z,w,h,d,ipos){var x=(x!=null)?x:0;var y=(y!=null)?y:0;var z=(z!=null)?z:0;var w=(w!=null)?w:1;var h=(h!=null)?h:1;var d=(d!=null)?d:1;var hw=w/2;var hh=h/2;var hd=d/2;var ipos=(ipos!=null)?(24*ipos):0;EnergizeGL.addVertex([x-hw,y+hh,z+hd,x+hw,y+hh,z+hd,x+hw,y-hh,z+hd,x-hw,y-hh,z+hd,x-hw,y+hh,z-hd,x-hw,y-hh,z-hd,x+hw,y-hh,z-hd,x+hw,y+hh,z-hd,x-hw,y-hh,z-hd,x-hw,y-hh,z+hd,x+hw,y-hh,z+hd,x+hw,y-hh,z-hd,x-hw,y+hh,z-hd,x+hw,y+hh,z-hd,x+hw,y+hh,z+hd,x-hw,y+hh,z+hd,x+hw,y+hh,z-hd,x+hw,y-hh,z-hd,x+hw,y-hh,z+hd,x+hw,y+hh,z+hd,x-hw,y+hh,z-hd,x-hw,y+hh,z+hd,x-hw,y-hh,z+hd,x-hw,y-hh,z-hd]);EnergizeGL.addNormal([0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0]);EnergizeGL.addTextureCoord([0.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0]);EnergizeGL.addIndex([ipos,1+ipos,2+ipos,ipos,2+ipos,3+ipos,4+ipos,5+ipos,6+ipos,4+ipos,6+ipos,7+ipos,8+ipos,9+ipos,10+ipos,8+ipos,10+ipos,11+ipos,12+ipos,13+ipos,14+ipos,12+ipos,14+ipos,15+ipos,16+ipos,17+ipos,18+ipos,16+ipos,18+ipos,19+ipos,20+ipos,21+ipos,22+ipos,20+ipos,22+ipos,23+ipos]);}
EGLFactory.prototype.parseObjFile=function(text){var mesh=[];mesh['v']=[];mesh['n']=[];mesh['t']=[];mesh['i']=[];var positionsArray=[];var texcoordsArray=[];var normalsArray=[];var indicesArray=[];var positions=[];var texcoords=[];var normals=[];var facemap={};var index=0;var line=null;var f=null;var pos=0;var tex=0;var nor=0;var x=0.0;var y=0.0;var z=0.0;var tokens=null;var hasPos=false;var hasTex=false;var hasNor=false;var lines=text.split("\n");for(var lineIndex in lines){line=lines[lineIndex].replace(/[ \t]+/g," ").replace(/\s\s*$/,"");if(line[0]=="#")continue;tokens=line.split(" ");if(tokens[0]=="v"){positions.push(parseFloat(tokens[1]));positions.push(parseFloat(tokens[2]));positions.push(parseFloat(tokens[3]));}
else if(tokens[0]=="vt"){texcoords.push(parseFloat(tokens[1]));texcoords.push(parseFloat(tokens[2]));}
else if(tokens[0]=="vn"){normals.push(parseFloat(tokens[1]));normals.push(parseFloat(tokens[2]));normals.push(parseFloat(tokens[3]));}
else if(tokens[0]=="f"){if(tokens.length!=4)continue;for(var i=1;i<4;++i){if(!(tokens[i]in facemap)){f=tokens[i].split("/");if(f.length==1){pos=parseInt(f[0])-1;tex=pos;nor=pos;}
else if(f.length==3){pos=parseInt(f[0])-1;tex=parseInt(f[1])-1;nor=parseInt(f[2])-1;}
else{return false;}
x=0.0;y=0.0;z=0.0;if((pos*3+2)<positions.length){var hasPos=true;x=positions[pos*3+0];y=positions[pos*3+1];z=positions[pos*3+2];}
positionsArray.push(x);positionsArray.push(y);positionsArray.push(z);x=0;y=0;if((tex*2+1)<texcoords.length){hasTex=true;x=texcoords[tex*2+0];y=texcoords[tex*2+1];}
texcoordsArray.push(x);texcoordsArray.push(y);x=0.0;y=0.0;z=1.0;if((nor*3+2)<normals.length){hasNor=true;x=normals[nor*3+0];y=normals[nor*3+1];z=normals[nor*3+2];}
normalsArray.push(x);normalsArray.push(y);normalsArray.push(z);facemap[tokens[i]]=index++;}
indicesArray.push(facemap[tokens[i]]);}}}
if(hasPos){mesh['v']=positionsArray;}
if(hasNor){mesh['n']=normalsArray;}
if(hasTex){mesh['t']=texcoordsArray;}
if(indicesArray.length>0){mesh['i']=indicesArray;}
return mesh;}
EnergizeGL.ensureValue=function(v,d){if(!v)return d;return v;}
function triangle(x,y,z,w,h){EnergizeGL.triangle(x,y,z,w,h);}
EnergizeGL.triangle=function(x,y,z,w,h){if(this.doMeshWriting)this.factory.addTriangle(x,y,z,w,h);else this.mesh('triangle',TRIANGLES,x,y,z,w,h);}
function rectangle(x,y,z,w,h){EnergizeGL.rectangle(x,y,z,w,h);}
EnergizeGL.rectangle=function(x,y,z,w,h){if(this.doMeshWriting)this.factory.addRectangle(x,y,z,w,h);else this.mesh('rectangle',TRIANGLE_STRIP,x,y,z,w,h);}
function circle(x,y,z,w,h){EnergizeGL.circle(x,y,z,w,h);}
EnergizeGL.circle=function(x,y,z,w,h){if(this.doMeshWriting)this.factory.addCircle(x,y,z,w,h);else this.mesh('circle',TRIANGLE_FAN,x,y,z,w,h);}
function grid(){EnergizeGL.grid();}
EnergizeGL.grid=function(){if(this.doMeshWriting)this.factory.addGrid(1000);else this.mesh('grid',LINES);}
function cube(x,y,z,w,h,d){EnergizeGL.cube(x,y,z,w,h,d);}
EnergizeGL.cube=function(x,y,z,w,h,d){if(this.doMeshWriting)this.factory.addCube(x,y,z,w,h,d,this.cubesAddedToMesh++);else this.mesh('cube',TRIANGLES,x,y,z,w,h,d);}
function pyramid(x,y,z,w,h,d){EnergizeGL.pyramid(x,y,z,w,h,d);}
EnergizeGL.pyramid=function(x,y,z,w,h,d){if(this.doMeshWriting)this.factory.addPyramid(x,y,z,w,h,d);else this.mesh('pyramid',TRIANGLE_STRIP,x,y,z,w,h,d);}
function sphere(x,y,z,w,h,d){EnergizeGL.sphere(x,y,z,w,h,d);}
EnergizeGL.sphere=function(x,y,z,w,h,d){if(this.doMeshWriting)this.factory.addSphere(x,y,z,w,h,d);else this.mesh('sphere',TRIANGLE_STRIP,x,y,z,w,h,d);}
function EGLLoaderFile(){}
function EGLLoader(){}
EGLLoader.prototype.toLoad=[];EGLLoader.prototype.toObserve=[];EGLLoader.prototype.addFile=function(name,uri){var f=new EGLLoaderFile();f.name=name;f.path=uri;f.type='file';f.checked=false;f.complete=false;this.toLoad.push(f);}
EGLLoader.prototype.addImage=function(name,uri){var i=new Image();i.name=name;i.path=uri;i.type='image';this.toLoad.push(i);}
EGLLoader.prototype.httpRequests=[];EGLLoader.prototype.ajaxGet=function(file){if(window.XMLHttpRequest){var req=this.httpRequests[file.name]=new XMLHttpRequest();}else if(window.ActiveXObject){var req=this.httpRequests[file.name]=new ActiveXObject("Microsoft.XMLHTTP");}
if(req!=undefined){var self=this;req.onreadystatechange=function(){self.ajaxGetDone(file.name);};req.open("GET",file.path,true);req.send("");}}
EGLLoader.prototype.ajaxGetDone=function(name){var cFile;for(var i=0;i<this.toLoad.length;i++)if(this.toLoad[i].name==name)cFile=this.toLoad[i];var req=this.httpRequests[name];if(cFile&&req){if(req.readyState==4){if(req.status==200){cFile.complete=true;cFile.content=req.responseText;}else{cFile.complete=false;EnergizeGL.log('File: '+cFile.name+' ('+cFile.path+') - Could not be load!');}}}}
EGLLoader.prototype.callback=null;EGLLoader.prototype.intID=null;EGLLoader.prototype.start=function(callback){var cLoad=null;for(var i=0;i<this.toLoad.length;i++){cLoad=this.toLoad[i];if(cLoad.type=='image')cLoad.src=cLoad.path;else this.ajaxGet(cLoad);}
this.callback=callback;var self=this;this.intID=setInterval(function(){self.loadLoop();},1000);}
EGLLoader.prototype.lastPercent=0;EGLLoader.prototype.loadLoop=function(){var doneLoading=true;var numLoading=this.toLoad.length;var numDoneLoading=0;var cLoad=null;for(var i=0;i<this.toLoad.length;i++){cLoad=this.toLoad[i];if(cLoad.checked){numDoneLoading++;}else{if(cLoad.type=='image'){if(cLoad.complete&&cLoad.width==0){EnergizeGL.log('File: '+cLoad.name+' ('+cLoad.path+') - The URI seems to be wrong! I\'m skipping this file!');this.toLoad[i].width=1;numDoneLoading++;this.toLoad[i].checked=true;}else{if(!cLoad.width>0)doneLoading=false;else if(cLoad.width>0&&cLoad.complete){numDoneLoading++;EnergizeGL.log('File: '+cLoad.name+' ('+cLoad.path+') - Done ('+cLoad.width+'px x '+cLoad.height+'px)!');this.toLoad[i].checked=true;}}}else{if(cLoad.complete){numDoneLoading++;EnergizeGL.log('File: '+cLoad.name+' ('+cLoad.path+') - Done!');cLoad.checked=true;}}}}
if(doneLoading)clearInterval(this.intID);var percent=(100/numLoading)*numDoneLoading;if(this.callback&&percent!=this.lastPercent)this.callback(percent);this.lastPercent=percent;}
EGLLoader.prototype.getFile=function(name){var cLoad=null;for(var i=0;i<this.toLoad.length;i++){cLoad=this.toLoad[i];if(cLoad.name==name)return cLoad;}
return false;}
EGLLoader=new EGLLoader();function EGLTextureCanvas(id,width,height){this.id=id;this.width=width;this.height=height;this.canvas=this.getCanvas(this.id,this.width,this.height);this.context=this.canvas.getContext('2d');this.pixels;this.refreshPixels();}
EGLTextureCanvas.prototype.refreshPixels=function(){this.pixels=this.context.createImageData(this.width,this.height);}
EGLTextureCanvas.prototype.getCanvas=function(id,width,height){var atc=document.getElementById(id);if(!atc){atc=document.createElement('canvas');atc.setAttribute('id',id);atc.style.display='none';}
atc.setAttribute('width',width);atc.setAttribute('height',height);document.getElementsByTagName('body')[0].appendChild(atc);return atc;}
EGLTextureCanvas.prototype.showCanvas=function(){this.canvas.style.display='block';}
EGLTextureCanvas.prototype.hideCanvas=function(){this.canvas.style.display='none';}
EGLTextureCanvas.prototype.setWidthHeight=function(width,height){this.width=width;this.height=height;this.canvas.setAttribute('width',width);this.canvas.setAttribute('height',height);this.refreshPixels();}
EGLTextureCanvas.prototype.setPixel=function(x,y,color){var i=(x+y*this.width)*4;this.pixels.data[i+0]=color[0];this.pixels.data[i+1]=color[1];this.pixels.data[i+2]=color[2];this.pixels.data[i+3]=color[3];}
EGLTextureCanvas.prototype.drawImage=function(image){this.context.drawImage(image,0,0,this.width,this.height,0,0,this.width,this.height);}
EGLTextureCanvas.prototype.flush=function(){this.context.putImageData(this.pixels,0,0);}
EGLTextureCanvas.prototype.getContext=function(){return this.context;}
EGLTextureCanvas.prototype.getTexture=function(){return this.canvas;}
function EGLTextures(gl){this.gl=gl;this.textures=[];this.genTextures=[];this.canvas=new EGLTextureCanvas('egltexturecanvas',1,1);}
EGLTextures.prototype.isPo2=function(x){return x&&!(x&(x-1));}
EGLTextures.prototype.ensureImagePo2=function(width,height){while(!this.isPo2(width))width--;while(!this.isPo2(height))height--;return[width,height];}
EGLTextures.prototype.createTextureFromImage=function(name,image){var dim=this.ensureImagePo2(image.width,image.height);var width=dim[0];var height=dim[1];if(width!=image.width||height!=image.height){image.width=width;image.height=height;EnergizeGL.log('Warning! Texture '+name+' is not power of two! Cropping down to '+width+'px / '+height+'px');}
this.canvas.setWidthHeight(image.width,image.height);this.canvas.drawImage(image,0,0);image=this.canvas.getTexture();this.textures[name]=this.gl.createTexture();this.updateTextureImage(name,image);}
EGLTextures.prototype.updateTextureImage=function(name,image){var t=this.textures[name];this.gl.bindTexture(this.gl.TEXTURE_2D,t);this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,image);this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);this.gl.generateMipmap(this.gl.TEXTURE_2D);this.gl.bindTexture(this.gl.TEXTURE_2D,null);}
EGLTextures.prototype.createTexture=function(name,width,height){if(!height)height=width;var tc=this.genTextures[name]=new EGLTextureCanvas('apptex'+name+'canvas',width,height);this.textures[name]=this.gl.createTexture();this.updateTexture(name,tc.getTexture());}
EGLTextures.prototype.updateTexture=function(name){this.updateTextureImage(name,this.genTextures[name].getTexture());}
EGLTextures.prototype.getTexture=function(name){return this.textures[name];}
EGLTextures.prototype.setTexturePixel=function(name,x,y,color){this.genTextures[name].setPixel(x,y,color);}
EGLTextures.prototype.updateTexturePixels=function(name){this.genTextures[name].flush();this.createTextureFromImage(name,this.genTextures[name].getTexture());}
EGLTextures.prototype.getTextureCanvas=function(name){return this.genTextures[name].getContext();}
EGLTextures.prototype.showTextureCanvas=function(name){this.genTextures[name].showCanvas();}
EGLTextures.prototype.hideTextureCanvas=function(name){this.genTextures[name].hideCanvas();}
function EGLFrameBuffers(gl){this.gl=gl;this.fbs=[];this.rbs=[];}
EGLFrameBuffers.prototype.createRenderToTextureBuffer=function(name,texture,width,height){if(!height)height=width;this.gl.bindTexture(this.gl.TEXTURE_2D,texture);var fb=this.fbs[name]=this.gl.createFramebuffer();this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,fb);var rb=this.rbs[name]=this.gl.createRenderbuffer();this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,rb);this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.DEPTH_COMPONENT16,width,height);this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER,this.gl.COLOR_ATTACHMENT0,this.gl.TEXTURE_2D,texture,0);this.gl.framebufferRenderbuffer(this.gl.FRAMEBUFFER,this.gl.DEPTH_ATTACHMENT,this.gl.RENDERBUFFER,rb);this.gl.bindTexture(this.gl.TEXTURE_2D,null);this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,null);this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null);}
EGLFrameBuffers.prototype.exists=function(name){return typeof(this.fbs[name])!='undefined';}
EGLFrameBuffers.prototype.getFrameBuffer=function(name){return this.fbs[name];}
EGLFrameBuffers.prototype.getRenderBuffer=function(name){return this.rbs[name];}
EGLFrameBuffers.prototype.bindBuffer=function(name){this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this.getFrameBuffer(name));}
EGLFrameBuffers.prototype.unbindBuffer=function(){this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null);}
function startRenderToTexture(name,width,height){EnergizeGL.startRenderToTexture(name,width,height);}
EnergizeGL.startRenderToTexture=function(name,width,height){if(!this.framebuffers.exists(name)){if(!width){width=this.width;height=this.height;}
if(!height)height=width;this.createTexture(name,width,height);this.framebuffers.createRenderToTextureBuffer(name,this.textures.getTexture(name),width,height);}
this.framebuffers.bindBuffer(name);this.clearAndSetScene();}
function stopRenderToTexture(){EnergizeGL.stopRenderToTexture();}
EnergizeGL.stopRenderToTexture=function(){this.framebuffers.unbindBuffer();this.clearAndSetScene();}
function EGLEasing(){}
EGLEasing.sin=function(start,end,damp,step){return EnergizeGL.map(Math.sin(step/damp),-1,1,start,end);}
function getScreenPosition(obj){var oobj=obj;var curleft=0;if(obj.offsetParent){while(1){curleft+=obj.offsetLeft;if(!obj.offsetParent)break;obj=obj.offsetParent;}}else if(obj.x)curleft+=obj.x;obj=oobj;var curtop=0;if(obj.offsetParent){while(1){curtop+=obj.offsetTop;if(!obj.offsetParent)break;obj=obj.offsetParent;}}else if(obj.y)curtop+=obj.y;return[curleft,curtop];}
function getScreenRes(){var viewportwidth=0;var viewportheight=0;if(typeof window.innerWidth!='undefined')
{viewportwidth=window.innerWidth,viewportheight=window.innerHeight}
else if(typeof document.documentElement!='undefined'&&typeof document.documentElement.clientWidth!='undefined'&&document.documentElement.clientWidth!=0)
{viewportwidth=document.documentElement.clientWidth,viewportheight=document.documentElement.clientHeight}
else
{viewportwidth=document.getElementsByTagName('body')[0].clientWidth;viewportheight=document.getElementsByTagName('body')[0].clientHeight;}
return[viewportwidth,viewportheight];}
function StartEnergizeGL(canvas,screenmode,log,showControls){document.addEventListener("DOMContentLoaded",function(){var eglCanvas=document.getElementById(canvas);var res=getScreenRes();if(screenmode){switch(screenmode){case'fillscreen':eglCanvas.setAttribute('width',res[0]);eglCanvas.setAttribute('height',res[1]);break;}}
if(showControls){var div=document.createElement('div');var sp=getScreenPosition(eglCanvas);div.style.zIndex=30;div.style.width=eglCanvas.width+'px';div.style.height='50px';div.style.position='absolute';div.style.top=sp[1]+'px';div.style.left=sp[0]+'px';div.style.textAlign='right';div.innerHTML='<div id="eglplay" style="float: right; height: 50px; cursor: pointer;">Play</div>';div.innerHTML=div.innerHTML+'<div id="eglstop" style="float: right; height: 50px; cursor: pointer;">Stop</div>';div.setAttribute('id','appctrl');document.getElementsByTagName('body')[0].appendChild(div);document.getElementById('eglplay').onclick=function(){if(EnergizeGL.status=='drawing'){this.innerHTML='Play';EnergizeGL.pause();}else if(EnergizeGL.status=='paused'||EnergizeGL.status=='loaded'){this.innerHTML='Pause';EnergizeGL.start();}else if(EnergizeGL.status=='stopped'){this.innerHTML='Pause';if(EnergizeGL.init(eglCanvas,document.getElementById(log)))EnergizeGL.start();}};document.getElementById('eglstop').onclick=function(){document.getElementById('eglplay').innerHTML='Play';EnergizeGL.stop();};EnergizeGL.stopped=function(){document.getElementById('eglplay').innerHTML='Play';}
EnergizeGL.init(eglCanvas,document.getElementById(log));}else{if(EnergizeGL.init(eglCanvas,document.getElementById(log)))EnergizeGL.start();}},false);}